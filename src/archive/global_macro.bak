{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"global_macro.ipynb","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"TYtBaljr6WAR"},"source":["# **TODO**\r\n"]},{"cell_type":"markdown","metadata":{"id":"UKdhM4hV7Afz"},"source":["1. **Analysis Periods and Backtesting - Need Optimization function and Covariances**\r\n","2. **Performance and Risk Reporting for comparing Strategies**\r\n","- Table\r\n","- PnL graph\r\n","- Daily returns Plot + analysis PnL graph\r\n","- Summarizing Table\r\n","3. Final Report\r\n","- **Conclusion, estimators justification**\r\n","- **Description of models, strategies, computational engine**"]},{"cell_type":"markdown","metadata":{"id":"qcWfjXY7mpRu"},"source":["# **Global Macro Strategies**\r\n","Authors: Theo Dimitrasopoulos✝, Yuki Homma✝\r\n","\r\n","Advisor: Papa Momar Ndiaye✝\r\n","\r\n","✝ Department of Financial Engineering; Stevens Institute of Technology Babbio School of Business\r\n","\r\n","*(Final Project for FE630: Modern Portfolio Theory & Applications)*"]},{"cell_type":"markdown","metadata":{"id":"4kFm9MIi2aIQ"},"source":["## **Setup**"]},{"cell_type":"markdown","metadata":{"id":"ZmNZi28M2w6o"},"source":["### Environment"]},{"cell_type":"code","metadata":{"id":"7gjExcSRusLr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608606372487,"user_tz":300,"elapsed":1179,"user":{"displayName":"本間雄揮","photoUrl":"","userId":"17752033729548371530"}},"outputId":"c9fd048c-7013-4ad0-d141-39893c41a0c9"},"source":["# -*- coding: utf-8 -*-\r\n","\r\n","# ENVIRONMENT CHECK:\r\n","import sys, os, inspect, site, pprint\r\n","# Check whether in Colab:\r\n","IN_COLAB = 'google.colab' in sys.modules\r\n","if IN_COLAB == True:\r\n","  print('YES, this is a Google Colaboratory environment.')\r\n","else:\r\n","  print('NO, this is not a Google Colaboratory environment.')\r\n","print(' ')\r\n","\r\n","# Python installation files:\r\n","stdlib = os.path.dirname(inspect.getfile(os))\r\n","python_version = !python --version\r\n","print('Python Standard Library is located in:\\n' + stdlib)\r\n","print(' ')\r\n","print('This environment is using {}'.format(str(python_version[0])))\r\n","print(' ')\r\n","print('Local system packages are located in:')\r\n","pprint.pprint(site.getsitepackages())\r\n","print(' ')\r\n","print('Local user packages are located in:\\n' + site.getusersitepackages())\r\n","\r\n","# Installed packages:\r\n","#!pip list -v\r\n","#!pip list --user -v"],"execution_count":null,"outputs":[{"output_type":"stream","text":["YES, this is a Google Colaboratory environment.\n"," \n","Python Standard Library is located in:\n","/usr/lib/python3.6\n"," \n","This environment is using Python 3.6.9\n"," \n","Local system packages are located in:\n","['/usr/local/lib/python3.6/dist-packages',\n"," '/usr/lib/python3/dist-packages',\n"," '/usr/lib/python3.6/dist-packages']\n"," \n","Local user packages are located in:\n","/root/.local/lib/python3.6/site-packages\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"l8yTQMbBusvP"},"source":["# Mount Google Drive:\r\n","if IN_COLAB:\r\n","  from google.colab import drive\r\n","  drive.mount('/content/drive', force_remount=True)\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uiY9mHXGv7Tr"},"source":["# Define Paths:\r\n","if IN_COLAB:\r\n","  graphs_dir = '/content/drive/MyDrive/Colab Notebooks/FE630_Final/report/graphics/'\r\n","  data_dir = '/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/data/'\r\n","  source_dir = '/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/'\r\n","else:\r\n","  graphs_dir = 'C:/Users/theon/GDrive/Colab Notebooks/FE630_Final/report/graphics/'\r\n","  data_dir = 'C:/Users/theon/GDrive/Colab Notebooks/FE630_Final/src/data/'\r\n","  source_dir = '/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/'\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zYf4wLMc2y8y"},"source":["### Packages"]},{"cell_type":"markdown","metadata":{"id":"qgVpJseB8F32"},"source":["#### Uninstall Packages:"]},{"cell_type":"code","metadata":{"id":"n4-fr8qlohzV"},"source":["# UNINSTALL PACKAGES:\r\n","#!pip uninstall pandas -y\r\n","#!pip uninstall numpy -y\r\n","#!pip uninstall cvxopt -y\r\n","#!pip uninstall matplotlib -y\r\n","#!pip uninstall pandas-datareader -y\r\n","#!pip uninstall zipline -y\r\n","#!pip uninstall pyfolio -y\r\n","#!pip uninstall alphalens -y\r\n","#!pip uninstall empyrical -y\r\n","#!pip uninstall mlfinlab -y"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gcfVcoi18HV9"},"source":["#### Install Packages:"]},{"cell_type":"code","metadata":{"id":"op-Hz0wwTYeZ"},"source":["# INSTALL PACKAGES:\r\n","#!pip install pandas\r\n","#!pip install numpy\r\n","#!pip install cvxopt\r\n","#!pip install matplotlib\r\n","#!pip install pandas-datareader\r\n","#!pip install zipline\r\n","#!pip install pyfolio\r\n","#!pip install alphalens\r\n","#!pip install empyrical\r\n","#!pip install mlfinlab"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"S2Z0H8zUPQE6"},"source":["#### Inspect Packages"]},{"cell_type":"code","metadata":{"id":"urMcNI8vPUHB"},"source":["#!pip list -v\r\n","#!pip list --user -v"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DfgwQISU8C0u"},"source":["#### Import Packages:"]},{"cell_type":"code","metadata":{"id":"FmsNFk1Pmkzm"},"source":["# Core:\r\n","import sys\r\n","import io\r\n","import os\r\n","from datetime import datetime\r\n","\r\n","# Numerical:\r\n","import numpy as np\r\n","import pandas as pd\r\n","import scipy\r\n","from scipy.stats import kurtosis,skew,norm\r\n","from scipy.optimize import minimize, least_squares\r\n","import sklearn\r\n","from sklearn import linear_model\r\n","from sklearn.linear_model import LinearRegression\r\n","from sklearn.neighbors import KernelDensity\r\n","from sklearn.preprocessing import normalize\r\n","import statsmodels.api as smf\r\n","\r\n","# Data Processing:\r\n","import pandas_datareader.data as web\r\n","import pickle\r\n","import urllib.request\r\n","import zipfile\r\n","\r\n","# Plotting:\r\n","import matplotlib.pyplot as plt\r\n","from matplotlib.ticker import FuncFormatter\r\n","from mpl_toolkits.mplot3d import Axes3D\r\n","import matplotlib.mlab as mlab\r\n","\r\n","# Optimization:\r\n","from cvxopt import matrix, solvers\r\n","\r\n","# Bundles:\r\n","#import zipline\r\n","#import pyfolio as pf\r\n","#import alphalens\r\n","#import empyrical\r\n","#import mlfinlab\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4YXab6-a7_Tx"},"source":["#### Settings"]},{"cell_type":"code","metadata":{"id":"9Suzx8xo77ui"},"source":["# General:\r\n","import warnings\r\n","warnings.filterwarnings('ignore')\r\n","%matplotlib inline\r\n","get_ipython().run_line_magic('matplotlib', 'inline')\r\n","\r\n","# Other:\r\n","#%load_ext zipline\r\n","#%reload_ext zipline\r\n","#!zipline ingest"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PeUeuX9I-W_u"},"source":["#### Custom Packages:"]},{"cell_type":"code","metadata":{"id":"AcBaJb9d-WbN"},"source":["sys.path.append('/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/packages/alphalens/')\r\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/packages/empyrical/')\r\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/packages/mlfinlab/')\r\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/packages/pyfolio/')\r\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/FE630_Final/src/packages/zipline/')\r\n","path = pd.DataFrame(sys.path)\r\n","path.T"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bwCg4etgkxWO"},"source":["## **Definitions**"]},{"cell_type":"code","metadata":{"id":"rLdY3Kk_kzdl","executionInfo":{"status":"ok","timestamp":1608606560395,"user_tz":300,"elapsed":1507,"user":{"displayName":"Theo Dimitrasopoulos","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhRNhCMR9OSve5rpYHqQ5AxXHb4FT75fg51p-tfkA=s64","userId":"13959094896036405890"}}},"source":["# Generate random weights that sum up to 1:\r\n","def weights_randn(n):\r\n","    k = np.random.rand(n)\r\n","    return k / sum(k)\r\n","\r\n","# Save data:\r\n","def save_data(df, file_name, dir_name=data_dir):\r\n","    if not os.path.exists(dir_name):\r\n","        os.mkdir(dir_name)\r\n","    # Save results to a csv file\r\n","    df.to_csv(dir_name + file_name + '.csv', index=True)\r\n","    print('Successfully saved {}.csv. in {}'.format(file_name, dir_name + file_name + '.csv'))\r\n","\r\n","# Download and prepare Fama French data:\r\n","def fama_french(frequency, no_factors):\r\n","  if frequency == 'annual':\r\n","    date_format = '  %Y'\r\n","    if no_factors == 3:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_CSV.zip'\r\n","      filename = 'F-F_Research_Data_Factors'\r\n","    elif no_factors == 5:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_5_Factors_2x3_CSV.zip'\r\n","      filename = 'F-F_Research_Data_5_Factors_2x3'\r\n","    else:\r\n","      print('Please choose 3 or 5 for the 3- and 5-Factor Model respectively.')\r\n","  elif frequency == 'monthly':\r\n","    date_format = '%Y%m'\r\n","    if no_factors == 3:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_CSV.zip'\r\n","      filename = 'F-F_Research_Data_Factors'\r\n","    elif no_factors == 5:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_5_Factors_2x3_CSV.zip'\r\n","      filename = 'F-F_Research_Data_5_Factors_2x3'\r\n","    else:\r\n","      print('Please choose 3 or 5 for the 3- and 5-Factor Model respectively.')\r\n","  elif frequency == 'weekly':\r\n","    date_format = '%Y%m%d'\r\n","    if no_factors == 3:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_weekly_CSV.zip'\r\n","      filename = 'F-F_Research_Data_Factors_weekly'\r\n","    elif no_factors == 5:\r\n","      print ('No weekly data available for the 5-Factor Model.')\r\n","    else:\r\n","      print('Please choose 3 or 5 for the 3- and 5-Factor Model respectively.')        \r\n","  elif frequency == 'daily':\r\n","    date_format = '%Y%m%d'\r\n","    if no_factors == 3:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily_CSV.zip'\r\n","      filename = 'F-F_Research_Data_Factors_daily'\r\n","    elif no_factors == 5:\r\n","      ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_5_Factors_2x3_daily_CSV.zip'\r\n","      filename = 'F-F_Research_Data_5_Factors_2x3_daily'\r\n","    else:\r\n","      print('Please choose 3 or 5 for the 3- and 5-Factor Model respectively.')\r\n","  else:\r\n","    print('Please choose between annual, monthly, weekly or daily for the frequency.')\r\n","  \r\n","  urllib.request.urlretrieve(ff_url, data_dir + filename + '.zip')\r\n","  zip = zipfile.ZipFile(data_dir + filename + '.zip', 'r')\r\n","  with zipfile.ZipFile(data_dir + filename + '.zip', 'r') as zip_ref:\r\n","    zip_ref.extractall(data_dir)\r\n","    zip.close()\r\n","\r\n","  try:\r\n","    ff_factors = pd.read_csv(data_dir + filename + '.CSV', skiprows = 3, index_col = 0)\r\n","  except ValueError:\r\n","    ff_factors = pd.read_csv(data_dir + filename + '.CSV', skiprows = 3, index_col = 0)\r\n","  ff_row = ff_factors.isnull().any(1).nonzero()[0][0]\r\n","  try:\r\n","    ff_factors = pd.read_csv(data_dir + filename + '.CSV', skiprows = 3, index_col = 0)\r\n","  except ValueError:\r\n","    ff_factors = pd.read_csv(data_dir + filename + '.csv', skiprows = 3, index_col = 0)\r\n","  ff_factors = ff_factors.iloc[:-1]\r\n","  if frequency == 'annual':\r\n","    ff_factors = ff_factors.iloc[1134:,]\r\n","  elif frequency == 'monthly':\r\n","    ff_factors = ff_factors.iloc[0:1131,]\r\n","  else:\r\n","    pass\r\n","  ff_factors = ff_factors.dropna()\r\n","  ff_factors.index = pd.to_datetime(ff_factors.index, format=date_format)\r\n","  ff_factors.index = ff_factors.index + pd.offsets.MonthEnd()\r\n","  #ff_factors = ff_factors/100\r\n","  return ff_factors\r\n","\r\n","def _check(arr):\r\n","    if len(np.array(arr).shape)==1:\r\n","        days = len(np.array(arr))\r\n","        cols = 1\r\n","    elif len(np.array(arr).shape)==2:\r\n","        days = np.array(arr).shape[0]\r\n","        cols = np.array(arr).shape[1]\r\n","    else:\r\n","        raise TypeError(\"Input should be 1-D np.array or pd.Series, or 2-D np.array or pd.DataFrame\")\r\n","    return cols,days\r\n","\r\n","def PnL(arr,P = 1000000):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    ret = []\r\n","    s = (np.array([1.0 for _ in range(cols)]))*P\r\n","    for i in range(days):\r\n","        s += data[i,:]*s\r\n","        ret.append(s.copy())\r\n","    return np.array(ret)\r\n","\r\n","def gmean(arr):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    return np.power(np.prod(1+data,axis=0),1/days)-1\r\n","\r\n","def MaxDrawdown(arr, n=10):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    D_ = []\r\n","    d_ = []\r\n","    for day in range(n,days):\r\n","        returns = pd.DataFrame(1+data[(day-n):day,:]).cumprod(axis = 0)\r\n","        D = returns.cummax(axis=0)-returns\r\n","        d = np.array(D)/(np.array(D+returns))\r\n","        D_.append(np.max(np.array(D),axis=0))\r\n","        d_.append(np.max(np.array(d),axis = 0))\r\n","    #print(np.array(D_).shape)\r\n","    return np.max(np.array(D_),axis=0),np.max(np.array(d_),axis=0)\r\n","\r\n","def Volatility(arr,yearly=False):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    if yearly:\r\n","        return np.sqrt(np.var(data,axis=0))\r\n","    else:\r\n","        return np.sqrt((252/days)*np.sum((data-np.mean(data,axis=0))**2,axis=0))\r\n","\r\n","def SharpRatio(arr,rf,yearly = False):\r\n","    cols,days = _check(arr)\r\n","    c,row = _check(rf)\r\n","    if not days == row:\r\n","        raise RuntimeError(\"length of columns of inputs do not match (%s, %s).\"% (days,row))\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    # if not yearly:\r\n","    #     data = np.power(1+data,250)-1\r\n","    r = np.array(rf).reshape(days,1)*250\r\n","    ER = np.power(np.product(1+data,axis=0),250/days)-np.mean(r,axis=0)-1\r\n","    #ER = np.mean(data,axis=0) - np.mean(r, axis=0)\r\n","    return ER/Volatility(data)\r\n","\r\n","def Kurtosis(arr):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    return ss.kurtosis(data,axis=0)\r\n","\r\n","def Skewness(arr):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    return ss.skew(data,axis=0)\r\n","\r\n","def VaR(arr,q):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    tmp = np.sort(data,axis=0)\r\n","    n = int(np.around((1-q)*days))\r\n","    return -tmp[max(0,n-1),:]\r\n","\r\n","def CVaR(arr,q):\r\n","    cols,days = _check(arr)\r\n","    data = np.array(arr).reshape(days, cols)\r\n","    tmp = np.sort(data,axis=0)\r\n","    # print(tmp)\r\n","    n = int(np.around((1 - q) * days))\r\n","    return np.mean(-tmp[0:max(0, n - 1),:],axis=0)\r\n","\r\n","def Summary(arr,RF, q=0.99):\r\n","    result = arr\r\n","    cols,days = _check(result)\r\n","    print(\"Last PnL after %s: \" % days,PnL(result)[-1,:])\r\n","    # Geometric mean\r\n","    print(\"Geometric mean\", gmean(result))\r\n","    # min\r\n","    print(\"Daily min\", np.min(result, axis=0))\r\n","    # max drawdown\r\n","    print('max drawdown: ', MaxDrawdown(result))\r\n","    # Vol\r\n","    print(\"Volatility\", Volatility(result))\r\n","\r\n","    # Sharp Ratio\r\n","\r\n","    print(\"Sharp ratio: \", SharpRatio(result, RF))\r\n","    print(\"Mean sharp: \", np.mean(SharpRatio(result, RF), axis=0))\r\n","\r\n","    # Kurtosis\r\n","    print(\"Kurtosis: \", Kurtosis(result))\r\n","    print(\"Skewness: \", Skewness(result))\r\n","    print(\"%s VaR %s days: \" % (q,days), VaR(result,q))\r\n","    print(\"%s CVaR %s days: \" % (q, days), CVaR(result, q))\r\n","\r\n","def back_test(etf_return, ff_data, return_period, variance_period, lamb, beta_tm):\r\n","  port_return_list = []\r\n","  omega_list = []\r\n","  omega_p = np.array([1/13] * 13)\r\n","  look_back =  max(return_period,\r\n","                   variance_period)\r\n","  next_chang_date = look_back - 1\r\n","  for i in range(len(etf_return)):\r\n","    omega_list.append(omega_p)\r\n","    today_return = np.asarray(etf_return.iloc[i,:])\r\n","    pr = np.dot(omega_p,today_return)\r\n","    port_return_list.append(pr)\r\n","    if i == next_chang_date:\r\n","      omega_p = get_omega(\r\n","          return_r = etf_return.iloc[i+1-return_period:i+1],        \r\n","          factor_r =ff_data.iloc[i+1-return_period:i+1],\r\n","          return_v = etf_return.iloc[i+1-variance_period:i+1],\r\n","          factor_v = ff_data.iloc[i+1-variance_period:i+1],\r\n","          lamb_ = lamb,\r\n","          beta_tm_ = beta_tm,\r\n","          wp_ = omega_p)\r\n","      next_chang_date += 5\r\n","\r\n","    else:\r\n","        continue\r\n","\r\n","  return port_return_list,omega_list\r\n","\r\n","'''\r\n","- input return data frame, annual risk-free rate, confidence level, initial position\r\n","- before we input dataframe, we need to change the return dataframe column name to \"return\"\r\n","- indicator(simpleret, 0.03, 0.9, 100)\r\n","'''\r\n","\r\n","def indicator(X,rf,confidenceLevel,position):\r\n","  # Calculate the PnL:\r\n","  daily_cum_return=np.cumprod((X+1))\r\n","  annual_cum_return = (np.power(daily_cum_return.iloc[-1,0],1/len(X)))**250\r\n","\r\n","  #Daily Mean return(%):\r\n","  annual_arith_MeanRet=np.mean(X)*250\r\n","    \r\n","  #Geomean is zero if anyone of return rate is zero\r\n","  annual_geo_MeanRet=(np.power(daily_cum_return.iloc[-1,0],1/len(X))-1)*250\r\n","  # or\r\n","  #geoMeanRet=scipy.stats.mstats.gmean(X['simple ret rate'])\r\n","  # Min Return\r\n","  annual_MinRet = np.min(X)*250\r\n","    \r\n","  # MDD\r\n","  p_v =np.cumprod((X+1))*100\r\n","  p_v_extend = pd.DataFrame(np.append([p_v.iloc[0,0]]*9,p_v))\r\n","  Roll_Max = p_v_extend.rolling(window=10).max()\r\n","\r\n","  tenday_Drawdown = float(np.min(p_v_extend/Roll_Max-1)[0])\r\n"," \r\n","  # Volatility\r\n","  annual_vol=np.std(X)*np.sqrt(250)\r\n","  \r\n","  # Sharpe Ratio\r\n","  annualRatio=(annual_arith_MeanRet-rf)/annual_vol\r\n","\r\n","  # Skewness, Kurtosis\r\n","  annual_Kurt=kurtosis(X*250)\r\n","  annual_sk=skew(X*250)\r\n","    \r\n","  # MVaR VaR\r\n","  daily_Kurt=kurtosis(X)\r\n","  daily_sk=skew(X)\r\n","  z=norm.ppf(1-confidenceLevel)\r\n","  t=z+((1/6)*(z**2-1)*daily_sk)+((1/24)*(z**3-3*z))*daily_Kurt-((1/36)*(2*z**3-5*z)*(daily_sk**2))\r\n","  mVaR= position*(np.mean(X)+t*np.std(X))*np.sqrt(250)\r\n","  alpha=norm.ppf(1-confidenceLevel, np.mean(X), np.std(X))\r\n","  VaR= position*(alpha)\r\n","  annualVaR=VaR*np.sqrt(250)\r\n","  CVaR = position*np.mean(X[X<=np.quantile(X,1-confidenceLevel)])[0]*np.sqrt(250)\r\n","  df=pd.DataFrame([\r\n","                   annual_cum_return,\r\n","                   annual_arith_MeanRet[0],\r\n","                   annual_geo_MeanRet,annual_MinRet[0],\r\n","                   tenday_Drawdown,annual_vol[0],\r\n","                   annualRatio[0],\r\n","                   annual_Kurt[0],\r\n","                   annual_sk[0],\r\n","                   mVaR[0],\r\n","                   VaR[0],\r\n","                   annualVaR[0],\r\n","                   CVaR],\r\n","                  index=['Annual_cumulatedRet','Annual_ariMeanRet','Annual_geoMeanRet','Annual_MinRet','Max_10day_Drawdown','vol',\r\n","                           'Annual_SharpeRatio','Annual_Kurtosis','Annual_Skew','Annual_mVaR','Daily_VaR','Annual_VaR','Annual_CVaR'],\r\n","                  columns=['result'])\r\n","  return df\r\n","\r\n","def arg_w(rho, lamb, Q, wp, beta_im_ ,beta_T):\r\n","  def constrain1(w):\r\n","    return np.dot(beta_im_,w)-beta_T\r\n","\r\n","  def constrain2(w):\r\n","    return np.sum(w)-1\r\n","\r\n","  cons = [{'type':'eq', 'fun': constrain1},\r\n","          {'type':'eq', 'fun': constrain2}]\r\n","  bnds = scipy.optimize.Bounds(-2.0, 2.0, keep_feasible = True)\r\n","\r\n","  def f(w):\r\n","    return -rho.dot(w) + lamb*(w-wp).dot(Q.dot(w-wp))\r\n","\r\n","  w0 = np.array([1/13]*13)\r\n","  res = minimize(f, w0, method='SLSQP', bounds=bnds, constraints=cons,\r\n","                  tol=1e-9)\r\n","  return res.x\r\n","\r\n","def get_omega(return_r, factor_r, return_v, factor_v, lamb_, beta_tm_, wp_):\r\n","  rf = np.asarray(factor_r['RF'])\r\n","  rM_rf = np.asarray(factor_r['Mkt-RF'])\r\n","  rSMB = np.asarray(factor_r['SMB'])\r\n","  rHML = np.asarray(factor_r['HML'])\r\n","  SPY = np.asarray(return_r['SPY'])\r\n","\r\n","  ri = np.asarray(return_r)\r\n","\r\n","  var_market = np.var(SPY,ddof=1)\r\n","  beta_im = np.array([0.0]*13)\r\n","  for i in range (13):\r\n","    temp = np.cov(ri[:,i],SPY,ddof=1)\r\n","    beta_im[i] = temp[0,1] / var_market\r\n","\r\n","  Ri = ri - rf.reshape(-1,1)\r\n","  f = np.array([rM_rf, rSMB, rHML])\r\n","  F = f.T\r\n","\r\n","  lr = linear_model.LinearRegression().fit(F, Ri)\r\n","  alpha = lr.intercept_\r\n","  B = lr.coef_\r\n","\r\n","  # ρ of shortest period\r\n","  ft = f[:,-1]\r\n","  rho_r = alpha + B.dot(ft) + rf[-1]\r\n","\r\n","  rf_v = np.asarray(factor_v['RF'])\r\n","  rM_rf_v = np.asarray(factor_v['Mkt-RF'])\r\n","  rSMB_v = np.asarray(factor_v['SMB'])\r\n","  rHML_v = np.asarray(factor_v['HML'])\r\n","  SPY_v = np.asarray(return_v['SPY'])\r\n","\r\n","  ri_v = np.asarray(return_v)\r\n","\r\n","  var_market_v = np.var(SPY_v,ddof=1)\r\n","  beta_im_v = np.array([0.0]*13)\r\n","  for i in range (13):\r\n","    temp_v = np.cov(ri_v[:,i],SPY_v,ddof=1)\r\n","    beta_im_v[i] = temp_v[0,1] / var_market_v\r\n","\r\n","  Ri_v = ri_v - rf_v.reshape(-1,1)\r\n","  f_v = np.array([rM_rf_v, rSMB_v, rHML_v])\r\n","  F_v = f_v.T\r\n","\r\n","  lr_v = linear_model.LinearRegression().fit(F_v, Ri_v)\r\n","  alpha_v = lr_v.intercept_\r\n","  B_v = lr_v.coef_\r\n","\r\n","  eph_v = Ri_v.T - (alpha_v.reshape(-1,1) + B_v.dot(f_v))\r\n","  eph2_v = np.cov(eph_v,ddof=1)\r\n","  eph2_diag_v = np.diag(eph2_v)\r\n","  D_v = np.diag(eph2_diag_v)\r\n","\r\n","  omega_f_v = np.cov(f_v,ddof=1)\r\n","  cov_Rt_v = B_v.dot(omega_f_v).dot(B_v.T) + D_v\r\n","\r\n","  result = arg_w(rho_r, lamb_, cov_Rt_v, wp_, beta_im_v ,beta_tm_)\r\n","\r\n","  return result\r\n"],"execution_count":286,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"clPTJ9la2lvX"},"source":["## **Data**"]},{"cell_type":"markdown","metadata":{"id":"VH-kqRgnof0B"},"source":["### Introduction"]},{"cell_type":"markdown","metadata":{"id":"jZP7Pgy_ti24"},"source":["The following ETFs represent the investment Universe of our portfolios. They range from the S&P 500 to ETFs representing all continents such as Europe, Asia and Africa and asset types such as bonds, stocks, and commodities.\r\n","\r\n","1. CurrencyShares Euro Trust (FXE)\r\n","2. iShares MSCI Japan Index (EWJ)\r\n","3. SPDR GOLD Trust (GLD)\r\n","4. Powershares NASDAQ-100 Trust (QQQ)\r\n","5. SPDR S&P 500 (SPY) **(THE MARKET PORTFOLIO S&P 500 IS THE BENCHMARK)**\r\n","6. iShares Lehman Short Treasury Bond (SHV)\r\n","7. PowerShares DB Agriculture Fund (DBA)\r\n","8. United States Oil Fund LP (USO)\r\n","9. SPDR S&P Biotech (XBI)\r\n","10. iShares S&P Latin America 40 Index (ILF)\r\n","11. iShares MSCI Pacific ex-Japan Index Fund (EPP)\r\n","12. SPDR DJ Euro Stoxx 50 (FEZ)\r\n","\r\n","From this universe, we have created portfolios by utilizing the 3-factor Fama-French model. The investment portfolio that we created is compared to the following benchmark portfolios:\r\n","\r\n","1.\tThe Market Portfolio (S&P 500) \r\n","\r\n","The dataset includes daily price data between March 1st, 2007 to October 31th, 2020. We choose this investment horizon to match the Fama-French Factor data available.\r\n","\r\n","We have used three different look-back periods, which we have defined as: A. Short Term – 60 Days B. Medium Term – 120 Days C. Long Term – 200 Days To calculate the risk-return parameters of then portfolio we have used the target Beta as -1, -0.5, 0, 0.5, 1 and 1.5. The rebalance period is kept as one week as specified in the project."]},{"cell_type":"markdown","metadata":{"id":"XBeIV-ds2iJz"},"source":["### Containers"]},{"cell_type":"code","metadata":{"id":"QsClziO_ou90"},"source":["# Data containers:\r\n","p_u = pd.DataFrame()\r\n","p_aapl = pd.DataFrame()\r\n","p_spy = pd.DataFrame()\r\n","\r\n","# Ticker containers:\r\n","u_tix = ['FXE', 'EWJ', 'GLD', 'QQQ', 'SPY', 'SHV', 'GAF', 'DBA', 'USO', 'XBI', 'ILF', 'EPP', 'FEZ']\r\n","aapl_tix = ['AAPL']\r\n","spy_tix = ['SPY']\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HsAKHmHu784V"},"source":["### Load Data"]},{"cell_type":"markdown","metadata":{"id":"BonOGTKC2TS2"},"source":["#### Fama French Factors"]},{"cell_type":"markdown","metadata":{"id":"1ywctNo1mDBl"},"source":["A three-factor model proposed by Fama and French(1993), includes not only market excess return, but a capitalization size and book to market ratio will also be added in as influencing factors."]},{"cell_type":"markdown","metadata":{"id":"sPIQrBXvta23"},"source":["The random return of a given security is given by the formula,\r\n","\r\n","\\begin{equation}\r\n","r = r_{f}+\\beta_{1}(r_{m}-r_{f})+\\beta{2}(SMB)+\\beta_{3}(HML)+\\epsilon\r\n","\\end{equation}\r\n","\r\n","- rSMB represents small size variables minus big one\r\n","- rHML represents high minus low in book value to equity to book value to the market."]},{"cell_type":"code","metadata":{"id":"A62PKJbN2IXk"},"source":["# Using definition above:\r\n","# Fama/French 3-Factor Model:\r\n","'''\r\n","ff_3_daily = fama_french('daily', 3)\r\n","print('Fama/French 3-Factor Model Daily Data\\n' + str(ff_3_daily.tail(10)))\r\n","\r\n","ff_3_weekly = fama_french('weekly', 3)\r\n","print('Fama/French 3-Factor Model Weekly Data\\n' + str(ff_3_weekly.tail(10)))\r\n","\r\n","ff_3_monthly = fama_french('monthly',3)\r\n","print('Fama/French 3-Factor Model Monthly Data\\n' + str(ff_3_monthly.tail(10)))\r\n","\r\n","ff_3_annual = fama_french('annual', 3)\r\n","print('Fama/French 3-Factor Model Annual Data\\n' + str(ff_3_annual.tail(10)))\r\n","'''"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cKsJzrax7_HD"},"source":["# Manual loading:\r\n","# Fama/French 3-Factor Model:\r\n","ff_3_annual = pd.read_csv(data_dir + 'F-F_Research_Data_Factors.csv', skiprows = 3, index_col = 0)\r\n","ff_3_annual = ff_3_annual.iloc[:-1]\r\n","ff_3_annual = ff_3_annual.iloc[1134:,]\r\n","ff_3_annual.index = ff_3_annual.index.map(lambda h: '  '.join(h).replace(' ', ''))\r\n","ff_3_annual.index = pd.to_datetime(ff_3_annual.index, format='%Y')\r\n","ff_3_annual = ff_3_annual.dropna()\r\n","#ff_3_annual = ff_3_annual/100\r\n","print('Fama/French 3-Factor Model Annual Data\\n' + str(ff_3_annual.head(10)))\r\n","\r\n","ff_3_monthly = pd.read_csv(data_dir + 'F-F_Research_Data_Factors.csv', skiprows = 3, index_col = 0)\r\n","ff_3_monthly = ff_3_monthly.iloc[0:1131,]\r\n","ff_3_monthly = ff_3_monthly.dropna()\r\n","ff_3_monthly.index = pd.to_datetime(ff_3_monthly.index, format= '%Y%m')\r\n","#ff_3_monthly = ff_3_monthly/100\r\n","print('Fama/French 3-Factor Model Monthly Data\\n' + str(ff_3_monthly.head(10)))\r\n","\r\n","ff_3_weekly = pd.read_csv(data_dir + 'F-F_Research_Data_Factors_weekly.csv', skiprows = 3, index_col = 0)\r\n","ff_3_weekly = ff_3_weekly.dropna()\r\n","ff_3_weekly.index = pd.to_datetime(ff_3_weekly.index, format= '%Y%m%d')\r\n","ff_3_weekly = ff_3_weekly/100\r\n","print('Fama/French 3-Factor Model Weekly Data\\n' + str(ff_3_weekly.head(10)) + '\\n')\r\n","\r\n","ff_3_daily = pd.read_csv(data_dir + 'F-F_Research_Data_Factors_daily.csv', skiprows = 3, index_col = 0)\r\n","ff_3_daily = ff_3_daily.dropna()\r\n","ff_3_daily.index = pd.to_datetime(ff_3_daily.index, format= '%Y%m%d')\r\n","ff_3_daily = ff_3_daily/100\r\n","print('Fama/French 3-Factor Model Daily Data\\n' + str(ff_3_daily.head(10)) + '\\n')\r\n","\r\n","# Fama/French 5-Factor Model:\r\n","ff_5_annual = pd.read_csv(data_dir + 'F-F_Research_Data_5_Factors_2x3.csv', skiprows = 3, index_col = 0)\r\n","ff_5_annual = ff_5_annual.iloc[690:,]\r\n","ff_5_annual.index = ff_5_annual.index.map(lambda h: '  '.join(h).replace(' ', ''))\r\n","ff_5_annual.index = pd.to_datetime(ff_5_annual.index, format='%Y')\r\n","ff_5_annual = ff_5_annual.dropna()\r\n","#ff_5_annual = ff_5_annual/100\r\n","print('Fama/French 5-Factor Model Annual Data\\n' + str(ff_5_annual.head(10)) + '\\n')\r\n","\r\n","ff_5_monthly = pd.read_csv(data_dir + 'F-F_Research_Data_5_Factors_2x3.csv', skiprows = 3, index_col = 0)\r\n","ff_5_monthly = ff_5_monthly.iloc[:688,]\r\n","ff_5_monthly = ff_5_monthly.dropna()\r\n","ff_5_monthly.index = pd.to_datetime(ff_5_monthly.index, format='%Y%m')\r\n","#ff_5_monthly = ff_5_monthly/100\r\n","print('Fama/French 5-Factor Model Monthly Data\\n' + str(ff_5_monthly.tail(10)) + '\\n')\r\n","\r\n","ff_5_daily = pd.read_csv(data_dir + 'F-F_Research_Data_5_Factors_2x3_daily.csv', skiprows = 3, index_col = 0)\r\n","ff_5_daily = ff_5_daily.dropna()\r\n","ff_5_daily.index = pd.to_datetime(ff_5_daily.index, format='%Y%m%d')\r\n","ff_5_daily = ff_5_daily/100\r\n","print('Fama/French 5-Factor Model Daily Data\\n' + str(ff_5_daily.head(10)) + '\\n')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mZrqXZeMRAFy"},"source":["# Last date of time series data must match that of the Fama/French data:\r\n","last_datapoint = str(ff_3_daily.index[-1].strftime(\"%m/%d/%Y\"))\r\n","print('Last Date for Fama/French data: ' + last_datapoint)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2bfHGD2g2en7"},"source":["#### Historical Time Series"]},{"cell_type":"code","metadata":{"id":"pvCpi0_F0aF4"},"source":["# Retrieve ETF Data:\r\n","start_date = '01/03/2007'\r\n","end_date = last_datapoint\r\n","\r\n","for i in u_tix:\r\n","    tmp = web.DataReader(i, 'yahoo', start_date, end_date)\r\n","    p_u[i] = tmp['Adj Close']\r\n","for i in aapl_tix:\r\n","    tmp = web.DataReader(i, 'yahoo', start_date, end_date)\r\n","    p_aapl[i] = tmp['Adj Close']\r\n","for i in spy_tix:\r\n","    tmp = web.DataReader(i, 'yahoo', start_date, end_date)\r\n","    p_spy[i] = tmp['Adj Close']\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6I74H5cYnMlq"},"source":["### Preprocess Data"]},{"cell_type":"code","metadata":{"id":"tWvBZOWE0fB-"},"source":["# Clean data:\r\n","p_u.isnull().sum().sum()\r\n","p_aapl.isnull().sum().sum()\r\n","p_spy.isnull().sum().sum()\r\n","\r\n","p_u = p_u.dropna()\r\n","p_aapl = p_aapl.dropna()\r\n","p_spy = p_spy.dropna()\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5ltpJwVC3CeR"},"source":["# Sample data:\r\n","sys.stdout.write('\\nInvestment Universe U Time Series ({} - {}):\\n'.format(start_date, end_date) + str(p_u.tail(10)))\r\n","print('\\n' + str(p_u.shape))\r\n","sys.stdout.write('\\nAAPL Time Series ({} - {}):\\n'.format(start_date, end_date) + str(p_aapl.head(10)))\r\n","print('\\n' + str(p_aapl.shape))\r\n","sys.stdout.write('\\nSPY Time Series ({} - {}):\\n'.format(start_date, end_date) + str(p_spy.head(10)))\r\n","print('\\n' + str(p_spy.shape))\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kZ9i-e13s___"},"source":["### Transform Data"]},{"cell_type":"code","metadata":{"id":"Y7v8kL0iqjTM"},"source":["# Useful variables:\r\n","w = weights_randn(len(u_tix))\r\n","print('Random weights:\\n' + str(w))\r\n","days = 252\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AhGcOzkVqJcp"},"source":["# ETF Returns:\r\n","R_u = np.log(p_u / p_u.shift(1))\r\n","R_u = R_u.dropna()\r\n","print('\\nETF Portfolio Prices:\\n' + str(R_u.head(10)))\r\n","rho_u = np.mean(R_u, axis=0)\r\n","print('\\nETF Portfolio Mean Returns:\\n' + str(rho_u))\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I1F5w0CEqK7q"},"source":["# SPY Returns:\r\n","R_spy = np.log(p_spy / p_spy.shift(1))\r\n","R_spy = R_spy.dropna()\r\n","print('\\nSPY Prices:\\n' + str(R_spy.head(10)))\r\n","rho_spy = np.mean(R_spy, axis=0)\r\n","print('\\nSPY Mean Return:\\n' + str(rho_spy))\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hus3mYWTuwQ0"},"source":["### Save Data"]},{"cell_type":"code","metadata":{"id":"YzfYaQuI3pmL"},"source":["# Securities:\r\n","save_data(p_u, 'p_u')\r\n","save_data(p_aapl, 'p_aapl')\r\n","save_data(p_spy, 'p_spy')\r\n","save_data(R_spy,'R_spy')\r\n","save_data(R_u,'R_u')\r\n","\r\n","# Fama-French Processed Datasets (Archive):\r\n","save_data(ff_3_annual, 'ff_3_annual')\r\n","save_data(ff_5_annual, 'ff_5_annual')\r\n","save_data(ff_3_monthly, 'ff_3_monthly')\r\n","save_data(ff_5_monthly, 'ff_5_monthly')\r\n","save_data(ff_3_weekly, 'ff_3_weekly')\r\n","save_data(ff_3_daily, 'ff_3_daily')\r\n","save_data(ff_5_daily, 'ff_5_daily')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"icXUqsDTtzQf"},"source":["### Visualize Data"]},{"cell_type":"code","metadata":{"id":"FjJh5cJcqPS_"},"source":["# Visualize ETF Log-Returns:\r\n","R_spy = np.log(p_spy / p_spy.shift(1))\r\n","returns_u, axs = plt.subplots(4,3,figsize=(15, 7.5))\r\n","returns_u.suptitle('Log-Returns of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","axs[0,0].plot(R_u['FXE'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,0].set_title('FXE')\r\n","axs[0,1].plot(R_u['EWJ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,1].set_title('EWJ')\r\n","axs[0,2].plot(R_u['GLD'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,2].set_title('GLD')\r\n","axs[1,0].plot(R_u['QQQ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,0].set_title('QQQ')\r\n","axs[1,1].plot(R_u['SPY'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,1].set_title('SPY')\r\n","axs[1,2].plot(R_u['SHV'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,2].set_title('SHV')\r\n","axs[2,0].plot(R_u['DBA'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,0].set_title('DBA')\r\n","axs[2,1].plot(R_u['USO'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,1].set_title('USO')\r\n","axs[2,2].plot(R_u['XBI'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,2].set_title('XBI')\r\n","axs[3,0].plot(R_u['ILF'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,0].set_title('ILF')\r\n","axs[3,1].plot(R_u['EPP'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,1].set_title('EPP')\r\n","axs[3,2].plot(R_u['FEZ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,2].set_title('FEZ')\r\n","plt.tight_layout()\r\n","returns_u.subplots_adjust(top=0.9)\r\n","plt.savefig(graphs_dir + 'returns_u_log.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ivmAazblqXFj"},"source":["# Visualize ETF Price Time Series:\r\n","R_u = p_u\r\n","returns_u, axs = plt.subplots(4,3,figsize=(15, 7.5))\r\n","returns_u.suptitle('Historical Time Series of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","axs[0,0].plot(R_u['FXE'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,0].set_title('FXE')\r\n","axs[0,1].plot(R_u['EWJ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,1].set_title('EWJ')\r\n","axs[0,2].plot(R_u['GLD'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,2].set_title('GLD')\r\n","axs[1,0].plot(R_u['QQQ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,0].set_title('QQQ')\r\n","axs[1,1].plot(R_u['SPY'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,1].set_title('SPY')\r\n","axs[1,2].plot(R_u['SHV'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,2].set_title('SHV')\r\n","axs[2,0].plot(R_u['DBA'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,0].set_title('DBA')\r\n","axs[2,1].plot(R_u['USO'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,1].set_title('USO')\r\n","axs[2,2].plot(R_u['XBI'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,2].set_title('XBI')\r\n","axs[3,0].plot(R_u['ILF'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,0].set_title('ILF')\r\n","axs[3,1].plot(R_u['EPP'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,1].set_title('EPP')\r\n","axs[3,2].plot(R_u['FEZ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,2].set_title('FEZ')\r\n","plt.tight_layout()\r\n","returns_u.subplots_adjust(top=0.9)\r\n","plt.savefig(graphs_dir + 'prices_u_raw.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"93vfjkROqlbz"},"source":["# Visualize ETF Price Time Series:\r\n","fig = plt.figure(figsize=(15, 7.5))\r\n","ts_u = fig.add_subplot(111)\r\n","ts_u.plot(R_u['FXE'], linewidth=0.5, alpha=0.9, label='FXE')\r\n","ts_u.plot(R_u['EWJ'], linewidth=0.5, alpha=0.9, label='EWJ')\r\n","ts_u.plot(R_u['GLD'], linewidth=0.5, alpha=0.9, label='GLD')\r\n","ts_u.plot(R_u['QQQ'], linewidth=0.5, alpha=0.9, label='QQQ')\r\n","ts_u.plot(R_u['SPY'], linewidth=0.5, alpha=0.9, label='SPY')\r\n","ts_u.plot(R_u['SHV'], linewidth=0.5, alpha=0.9, label='SHV')\r\n","ts_u.plot(R_u['DBA'], linewidth=0.5, alpha=0.9, label='DBA')\r\n","ts_u.plot(R_u['USO'], linewidth=0.5, alpha=0.9, label='USO')\r\n","ts_u.plot(R_u['XBI'], linewidth=0.5, alpha=0.9, label='XBI')\r\n","ts_u.plot(R_u['ILF'], linewidth=0.5, alpha=0.9, label='ILF')\r\n","ts_u.plot(R_u['EPP'], linewidth=0.5, alpha=0.9, label='EPP')\r\n","ts_u.plot(R_u['FEZ'], linewidth=0.5, alpha=0.9, label='FEZ')\r\n","ts_u.set_xlabel('Year', fontweight='bold', fontsize=12)\r\n","ts_u.set_ylabel('Price', fontweight='bold', fontsize=12)\r\n","ts_u.set_title('Historical Time Series of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","ts_u.legend(loc='upper right', fontsize=10)\r\n","plt.savefig(graphs_dir + 'rho_u.png', bbox_inches='tight')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z5QnHmTFGPDV"},"source":["## **Analysis**"]},{"cell_type":"markdown","metadata":{"id":"nC787CjQosrO"},"source":["### Formulation"]},{"cell_type":"markdown","metadata":{"id":"H6qNHr3obEYZ"},"source":["#### Investment Strategy"]},{"cell_type":"markdown","metadata":{"id":"5LT11jipeGD8"},"source":["We build a Long-Short Global Macro Strategy with a Beta target using a factor-based model and evaluate its sensitivity to variations of Beta.\r\n","\r\n","To optimize the portfolios, we deploy the following strategies:\r\n","1. Maximize the return of the portfolio subject to a constraint of target Beta, where Beta is the single-factor market risk measure. This allows us to evaluate the sensitivity of the portfolios to variations of Beta. The portfolio is re-optimized (weight recalibration) every week for the investment horizon between March 2007 to the end of October 2020.\r\n","2. Minimum variance with a target return."]},{"cell_type":"markdown","metadata":{"id":"covS6dTGa3p7"},"source":["#### Optimization Problem:"]},{"cell_type":"markdown","metadata":{"id":"10i6ikkMoCcu"},"source":["The strategy aims to maximize return with a certain Target Beta under constraints.\r\n","\r\n","It is defined as,\r\n","\r\n","\\begin{cases}\r\n","\\max\\limits_{{\\omega ∈ ℝ^{n}}}\\rho^{T}\\omega-\\lambda(\\omega-\\omega_{p})^{T}\\Sigma(\\omega-\\omega_{p})\\\\\r\n","\\sum_{i=1}^{n} \\beta_{i}^{m}\\omega_{i}=\\beta_{T}^{m}\\\\\r\n","\\sum_{i=1}^{n} \\omega_{i}=1, -2\\leq\\omega_{i}\\leq2\r\n","\\end{cases}\r\n","\r\n","$\\Sigma$ is the the covariance matrix between the securities returns (computed from\r\n","the Factor Model), $\\omega_{p}$ is the composition of a reference Portfolio (the previous Portfolio when rebalancing the portfolio and $\\omega_{p}$ has all its components equal to $1/n$ for the first allocation) and $\\lambda$ is a small regularization parameter to limit the turnover;\r\n","\r\n","$\\beta_{i}^{m}=\\frac{cov(r_{i},r_{M}}{\\sigma^{2}(r_{M})}$ is the Beta of security $S_{i}$ as defined in the CAPM Model so that $\\beta_{P}^{m}=\\sum_{i=1}^{n}\\beta_{i}^{m}\\omega_{i}$ is the Beta of the Portfolio;\r\n","\r\n","$\\beta_{T}^{m}$ is the Portfolio's Target Beta, for example $\\beta_{T}^{m}=-1$, $\\beta_{T}^{m}=-0.5$, $\\beta_{T}^{m}=0$, $\\beta_{T}^{m}=0.5$, $\\beta_{T}^{m}=1.5$."]},{"cell_type":"markdown","metadata":{"id":"Z5A2cOZpbAf8"},"source":["#### Equivalent Optimization Problem:"]},{"cell_type":"markdown","metadata":{"id":"ZgMtDN9MbLFI"},"source":["We can reformulate the optimization problem above to make the programming process more straightforward:\r\n","\r\n","$(\\omega-\\omega_{p})^{T}\\Sigma(\\omega-\\omega_{p})\\rightarrow$\r\n","\r\n","$=(\\omega-\\omega_{p})^{T}\\Sigma\\omega-(\\omega-\\omega_{p} )^{T}\\Sigma\\omega_{p}$\r\n","\r\n","$=\\omega^{T} \\Sigma\\omega-2(\\omega^{T} \\Sigma\\omega_{p})+\\omega_{p}^{T}\\Sigma \\omega_{p}$\r\n","\r\n","We simplify,\r\n","- $d=\\rho-2\\lambda\\Sigma\\omega_{p}$\r\n","- $P=\\lambda\\Sigma$\r\n","\r\n","Finally,\r\n","\r\n","$\\max\\limits_{{\\omega ∈ ℝ^{n}}}(\\rho-2\\lambda\\Sigma\\omega_{p} )^{T} \\omega-\\lambda\\omega^{T}\\Sigma\\omega+\\lambda\\omega_{p}^{T}\\Sigma\\omega_{p}=\\max\\limits_{{\\omega ∈ ℝ^{n}}}d^{T}\\omega-\\omega^{T}P\\omega$"]},{"cell_type":"markdown","metadata":{"id":"YW_hSq95csMx"},"source":["\r\n","---\r\n","\r\n","The following formulation is equivalent,\r\n","\r\n","\\begin{cases}\r\n","\\max\\limits_{{\\omega ∈ ℝ^{n}}}d^{T}\\omega-\\omega^{T}P\\omega\\\\\r\n","\\sum_{i=1}^{n} \\beta_{i}^{m}\\omega_{i}=\\beta_{T}^{m}\\\\\r\n","\\sum_{i=1}^{n} \\omega_{i}=1, -2\\leq\\omega_{i}\\leq2\r\n","\\end{cases}\r\n","- $\\Sigma$ is the the covariance matrix between the returns of the portfolio assets;\r\n","- $\\omega_{p}$ is the composition of a reference Portfolio:\r\n","  - When rebalancing the portfolio, $\\omega_{p}$ is the previous portfolio\r\n","  - $\\omega_{p}$ has all its components equal to $1/n$ for the first allocation\r\n","- $\\lambda$ is a regularization parameter to limit the turnover\r\n","- $\\beta_{i}^{m}=\\frac{cov(r_{i},r_{M}}{\\sigma^{2}(r_{M})}$ is the Beta of security $S_{i}$ as defined in the CAPM Model s.t. $\\beta_{P}^{m}=\\sum_{i=1}^{n}\\beta_{i}^{m}\\omega_{i}$ is the portfolio Beta\r\n","- $\\beta_{T}^{m}$ is the Portfolio's Target Beta."]},{"cell_type":"markdown","metadata":{"id":"1z2_Vb2koLL1"},"source":["### Computation"]},{"cell_type":"code","metadata":{"id":"3qo7TTG3GXzn"},"source":["# Create hybrid dataset:\r\n","R_u_ff = pd.merge(R_u,ff_3_daily,how='inner',left_index=True,right_index=True)\r\n","R_spy_ff = pd.merge(R_spy,ff_3_daily,how='inner',left_index=True,right_index=True)\r\n","\r\n","# Rename Market Excess Column Index:\r\n","R_u_ff.rename(columns={\"Mkt-RF\":\"Mkt_RF\"}, inplace=True)\r\n","R_u_ff['Portfolio_Excess'] = R_u_ff.sum(axis=1) - R_u_ff['RF']\r\n","print(R_u_ff.head(10))\r\n","\r\n","# Quick save:\r\n","save_data(R_u_ff, 'R_u_ff')\r\n","save_data(R_spy_ff, 'R_spy_ff')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7BauvKVD-jMb"},"source":["# Estimate Security Betas:\r\n","betas = []\r\n","for i in range(0,len(u_tix)):\r\n","  reg_mult = smf.formula.ols(formula = \"R_u_ff.iloc[:, i] - RF ~ Mkt_RF - RF + SMB + HML\", data = R_u_ff).fit()\r\n","  betas.append(list(reg_mult.params))\r\n","\r\n","betas = pd.DataFrame(betas, index=u_tix)\r\n","betas.columns = ['Intercept', 'Mkt_RF', 'SMB', 'HML']\r\n","print(betas)\r\n","\r\n","# Quick save:\r\n","save_data(betas, 'betas')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PFDtwmJ-RsHt"},"source":["# Calculate Annualized Average Expected Returns under FF 3-Factor Model:\r\n","rho_daily = []\r\n","for i in range(0,len(u_tix)):\r\n","  step_0 = (R_spy_ff.sum(axis=1) - R_spy_ff['RF']).mul((betas.iloc[i,0] + betas.iloc[i,1]))\r\n","  step_1 = R_spy_ff['SMB'].mul(betas.iloc[i,2])\r\n","  step_2 = R_spy_ff['HML'].mul(betas.iloc[i,3])\r\n","  step_4 = step_0 + step_1 + step_2\r\n","  rho_daily.append(step_4)\r\n","rho_daily = pd.DataFrame(rho_daily)\r\n","rho_daily = rho_daily.T\r\n","rho_daily.columns = u_tix\r\n","print('Daily Average Expected Returns:\\n' + str(rho_daily.head(10)))\r\n","\r\n","rho_annual = rho_daily * 252\r\n","print('Annualized Average Expected Returns:\\n' + str(rho_annual.head(10)))\r\n","\r\n","# Quick Save:\r\n","save_data(rho_daily, 'rho_daily')\r\n","save_data(rho_annual, 'rho_annual')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7VoV25ScUw66"},"source":["# Calculate other variables:\r\n","ones = np.ones(len(u_tix))\r\n","mu_u = np.mean(rho_annual, axis=0)\r\n","print('Mean Average Expected Returns (Annual): \\n' + str(mu_u))\r\n","mu_u_daily = np.mean(rho_daily, axis=0)\r\n","print('\\nMean Average Expected Returns (Daily): \\n' + str(mu_u_daily))\r\n","Sigma_u = np.cov(rho_annual, rowvar=False)\r\n","print('\\nCovariance Matrix: \\n' + str(Sigma_u))\r\n","\r\n","P = 2 * (Sigma_u + 0.01 * np.identity(len(mu_u)))\r\n","#print('\\nP Matrix: \\n' + str(P))\r\n","omega_u = np.repeat(1/len(mu_u), len(mu_u))\r\n","A_eq = np.repeat(1,len(mu_u))\r\n","A_mat = pd.DataFrame(np.identity(len(mu_u))).merge(pd.DataFrame(-np.identity(len(mu_u))))\r\n","\r\n","#w_mvp = np.divide((np.linalg.inv(Sigma_u).dot(np.transpose(ones))),(ones.dot(np.linalg.inv(Sigma_u)).dot(np.transpose(ones))))\r\n","#print('Minimum Variance Portfolio Weights: \\n' + str(w_mvp))\r\n","#R_mvp = np.mean(R_u,axis=0).dot(np.transpose(w_mvp))\r\n","#print('Minimum Variance Portfolio Returns: \\n' + str(R_mvp))\r\n","#sd_mvp = np.sqrt(w_mvp.dot(Sigma_u).dot(np.transpose(w_mvp)))\r\n","#print('Minimum Variance Portfolio Standard Deviation: \\n'+ str(sd_mvp))\r\n","#v = []\r\n","###for i in range(0,1000):\r\n","###    val = np.append(r[i], 1).dot(A_inv).dot(np.transpose(np.append(r[i], 1)))\r\n","###    v.append(val)\r\n","#vars = np.diag(Sigma_u)\r\n","#print('Covariance Matrix Diagonal: \\n' + str(vars))\r\n","#stdev = np.sqrt(v)\r\n","#print('Standard Deviation of Securities: \\n' + str(stdev))\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VylqVK0O-nsv"},"source":["# Tangency portfolio:\r\n","'''\r\n","w_tang = np.linalg.inv(Sigma_u).dot(np.transpose((R_u - r_f))) / ones.dot(np.linalg.inv(Sigma_u)).dot(np.transpose(R_u - r_f))\r\n","print('Tangency Portfolio Weight: '+ str(w_tang))\r\n","R_tang = np.transpose(w_tang).dot(R_u)\r\n","print('Tangency Portfolio Return: ' + str(R_tang))\r\n","sd_tang = np.sqrt(np.transpose(w_tang).dot(Sigma_u).dot(w_tang))\r\n","print('Tangency Portfolio Standard Deviation: ' + str(sd_tang))\r\n","sd_front = np.linspace(0, 10, 1000)\r\n","r_front = []\r\n","'''"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-4f-go5EBqNK"},"source":["### Visualizations"]},{"cell_type":"code","metadata":{"id":"sjstBq2DwPfA"},"source":["# Visualize Daily Average Expected Returns:\r\n","r = np.transpose(np.linspace(0, 1, len(rho_annual)))\r\n","exp_returns_day, axs = plt.subplots(4,3,figsize=(15, 7.5))\r\n","exp_returns_day.suptitle('Daily Average Expected Returns of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","axs[0,0].plot(rho_daily['FXE'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,0].set_title('FXE')\r\n","axs[0,1].plot(rho_daily['EWJ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,1].set_title('EWJ')\r\n","axs[0,2].plot(rho_daily['GLD'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,2].set_title('GLD')\r\n","axs[1,0].plot(rho_daily['QQQ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,0].set_title('QQQ')\r\n","axs[1,1].plot(rho_daily['SPY'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,1].set_title('SPY')\r\n","axs[1,2].plot(rho_daily['SHV'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,2].set_title('SHV')\r\n","axs[2,0].plot(rho_daily['DBA'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,0].set_title('DBA')\r\n","axs[2,1].plot(rho_daily['USO'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,1].set_title('USO')\r\n","axs[2,2].plot(rho_daily['XBI'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,2].set_title('XBI')\r\n","axs[3,0].plot(rho_daily['ILF'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,0].set_title('ILF')\r\n","axs[3,1].plot(rho_daily['EPP'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,1].set_title('EPP')\r\n","axs[3,2].plot(rho_daily['FEZ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,2].set_title('FEZ')\r\n","plt.tight_layout()\r\n","exp_returns_day.subplots_adjust(top=0.9)\r\n","plt.savefig(graphs_dir + 'exp_returns_daily.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hLi3wtx9pRrX"},"source":["# Visualize Annualized Average Expected Returns:\r\n","r = np.transpose(np.linspace(0, 1, len(rho_annual)))\r\n","exp_returns_yr, axs = plt.subplots(4,3,figsize=(15, 7.5))\r\n","exp_returns_yr.suptitle('Annualized Average Expected Returns of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","axs[0,0].plot(r,rho_annual['FXE'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,0].set_title('FXE')\r\n","axs[0,1].plot(r,rho_annual['EWJ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,1].set_title('EWJ')\r\n","axs[0,2].plot(r,rho_annual['GLD'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[0,2].set_title('GLD')\r\n","axs[1,0].plot(r,rho_annual['QQQ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,0].set_title('QQQ')\r\n","axs[1,1].plot(r,rho_annual['SPY'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,1].set_title('SPY')\r\n","axs[1,2].plot(r,rho_annual['SHV'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[1,2].set_title('SHV')\r\n","axs[2,0].plot(r,rho_annual['DBA'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,0].set_title('DBA')\r\n","axs[2,1].plot(r,rho_annual['USO'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,1].set_title('USO')\r\n","axs[2,2].plot(r,rho_annual['XBI'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[2,2].set_title('XBI')\r\n","axs[3,0].plot(r,rho_annual['ILF'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,0].set_title('ILF')\r\n","axs[3,1].plot(r,rho_annual['EPP'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,1].set_title('EPP')\r\n","axs[3,2].plot(r,rho_annual['FEZ'], 'black', linewidth=0.5, alpha=0.9)\r\n","axs[3,2].set_title('FEZ')\r\n","plt.tight_layout()\r\n","exp_returns_yr.subplots_adjust(top=0.9)\r\n","plt.savefig(graphs_dir + 'exp_returns_annual.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7JC5OF93x1gd"},"source":["# Visualize Daily Average Expected Returns (Superimposed):\r\n","fig = plt.figure(figsize=(15, 7.5))\r\n","rho_u_day = fig.add_subplot(111)\r\n","rho_u_day.plot(rho_daily['FXE'], linewidth=0.5, alpha=0.9, label='FXE')\r\n","rho_u_day.plot(rho_daily['EWJ'], linewidth=0.5, alpha=0.9, label='EWJ')\r\n","rho_u_day.plot(rho_daily['GLD'], linewidth=0.5, alpha=0.9, label='GLD')\r\n","rho_u_day.plot(rho_daily['QQQ'], linewidth=0.5, alpha=0.9, label='QQQ')\r\n","rho_u_day.plot(rho_daily['SPY'], linewidth=0.5, alpha=0.9, label='SPY')\r\n","rho_u_day.plot(rho_daily['SHV'], linewidth=0.5, alpha=0.9, label='SHV')\r\n","rho_u_day.plot(rho_daily['DBA'], linewidth=0.5, alpha=0.9, label='DBA')\r\n","rho_u_day.plot(rho_daily['USO'], linewidth=0.5, alpha=0.9, label='USO')\r\n","rho_u_day.plot(rho_daily['XBI'], linewidth=0.5, alpha=0.9, label='XBI')\r\n","rho_u_day.plot(rho_daily['ILF'], linewidth=0.5, alpha=0.9, label='ILF')\r\n","rho_u_day.plot(rho_daily['EPP'], linewidth=0.5, alpha=0.9, label='EPP')\r\n","rho_u_day.plot(rho_daily['FEZ'], linewidth=0.5, alpha=0.9, label='FEZ')\r\n","rho_u_day.set_xlabel('Year', fontweight='bold', fontsize=12)\r\n","rho_u_day.set_ylabel('Return', fontweight='bold', fontsize=12)\r\n","rho_u_day.set_title('Daily Average Expected Returns of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","rho_u_day.legend(loc='upper right', fontsize=10)\r\n","plt.savefig(graphs_dir + 'exp_returns_daily_all.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F2UekC_qspya"},"source":["# Visualize Annualized Average Expected Returns (Superimposed):\r\n","fig = plt.figure(figsize=(15, 7.5))\r\n","rho_u_yr = fig.add_subplot(111)\r\n","rho_u_yr.plot(rho_annual['FXE'], linewidth=0.5, alpha=0.9, label='FXE')\r\n","rho_u_yr.plot(rho_annual['EWJ'], linewidth=0.5, alpha=0.9, label='EWJ')\r\n","rho_u_yr.plot(rho_annual['GLD'], linewidth=0.5, alpha=0.9, label='GLD')\r\n","rho_u_yr.plot(rho_annual['QQQ'], linewidth=0.5, alpha=0.9, label='QQQ')\r\n","rho_u_yr.plot(rho_annual['SPY'], linewidth=0.5, alpha=0.9, label='SPY')\r\n","rho_u_yr.plot(rho_annual['SHV'], linewidth=0.5, alpha=0.9, label='SHV')\r\n","rho_u_yr.plot(rho_annual['DBA'], linewidth=0.5, alpha=0.9, label='DBA')\r\n","rho_u_yr.plot(rho_annual['USO'], linewidth=0.5, alpha=0.9, label='USO')\r\n","rho_u_yr.plot(rho_annual['XBI'], linewidth=0.5, alpha=0.9, label='XBI')\r\n","rho_u_yr.plot(rho_annual['ILF'], linewidth=0.5, alpha=0.9, label='ILF')\r\n","rho_u_yr.plot(rho_annual['EPP'], linewidth=0.5, alpha=0.9, label='EPP')\r\n","rho_u_yr.plot(rho_annual['FEZ'], linewidth=0.5, alpha=0.9, label='FEZ')\r\n","rho_u_yr.set_xlabel('Year', fontweight='bold', fontsize=12)\r\n","rho_u_yr.set_ylabel('Return', fontweight='bold', fontsize=12)\r\n","rho_u_yr.set_title('Annualized Average Expected Returns of Portfolio Securities', fontweight='bold', fontsize=15)\r\n","rho_u_yr.legend(loc='upper right', fontsize=10)\r\n","plt.savefig(graphs_dir + 'exp_returns_annual_all.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9Y3hWO5GF7Mm"},"source":["## *Experiments*"]},{"cell_type":"code","metadata":{"id":"eOA2E1l3oFwr"},"source":["# ETF Data:\n","ticker = [\"FXE\",\"EWJ\",\"GLD\",\"QQQ\",\"SPY\",\"SHV\",\"DBA\",\"USO\",\n","          \"XBI\",\"ILF\",\"GAF\",\"EPP\",\"FEZ\"]\n","start =  datetime(2007, 3, 26)\n","end = datetime(2020, 10, 30)\n","data = pd.DataFrame()\n","for i in ticker:\n","    data[i] = web.DataReader(i, 'yahoo', start, end)[\"Close\"]\n","data.to_csv(\"ETFs.csv\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"collapsed":true,"id":"wcCvwLploFws"},"source":["# Load data\n","ETF = pd.read_csv(data_dir + \"ETFs.csv\", index_col=0)[55:]\n","F = pd.read_csv(data_dir + \"Factors.csv\", index_col=0)[56:]\n","F.index = ETF.index[1:]\n","# Calculqte the simple anualized returns for the ETFs\n","R = (ETF.pct_change(1)[1:])*250\n","# Calculate the excess annualized return for the ETFs\n","ER = pd.DataFrame(R.values-F[\"RF\"].values.reshape(-1,1),\n","                  index=F.index, columns=ticker)\n","F = F.iloc[:,0:3]\n","F"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"W874EjrqoFws"},"source":["# Before the subprime crisis(2007/03/26 - 2008/03/23)\n","R_bc = R[\"2007-03-26\":\"2008-03-23\"].values\n","ER_bc = ER[\"2007-03-26\":\"2008-03-23\"].values\n","F_bc = F[\"2007-03-26\":\"2008-03-23\"].values\n","\n","# During the subprime crisis(2008/03/24 - 2009/06/30)\n","# R_bc = R[\"2008-03-24\":\"2009-06-30\"].values\n","# ER_bc = ER[\"2008-03-24\":\"2009-06-30\"].values\n","# F_bc = F[\"2008-03-24\":\"2009-06-30\"].values\n","\n","# After the subprime crisis(2007/03/26 - 2008/03/23)\n","#R_bc = R[\"2009-06-30\":\"2016-10-20\"].values\n","#ER_bc = ER[\"2009-06-30\":\"2016-10-20\"].values\n","#F_bc = F[\"2009-06-30\":\"2016-10-20\"].values\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Iy917A6KpXCu"},"source":["Num_days = len(F_bc)\r\n","FR_bc = F_bc[1:].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b0wv1xGMuI08"},"source":["# Short term model(60 days)\r\n","Lambda = 0.001\r\n","beta_T = [0.5, 1, 1.5]\r\n","R_opt = []\r\n","\r\n","# Conduct the max return strategy:\r\n","for j in beta_T:\r\n","  Rp = []\r\n","  wp = np.ones((13,1))*1/13\r\n","  for i in range(len(R_bc)-59):\r\n","    r = R_bc[i:(i+60),:]\r\n","    er = ER_bc[i:(i+60),:]\r\n","    f1 = F_bc[i:(i+60),:]\r\n","    rho = r.mean(axis=0).reshape(-1,1)\r\n","    cov_f = np.cov(f1, rowvar=False)\r\n","\r\n","    # Run regression to get the beta:\r\n","    lm = LinearRegression()\r\n","    lm.fit(f1, er)\r\n","    coeff3 = lm.coef_\r\n","    beta = coeff3[:,0]\r\n","    error = er - lm.predict(f1)\r\n","\r\n","    # Calculate the covariance matrix:\r\n","    Q = coeff3.dot(cov_f).dot(coeff3.T)+np.diag(error.var(axis=0))\r\n","\r\n","    # Preparation for the optimization:\r\n","    P = matrix(2*Lambda*Q, tc='d')\r\n","    q = matrix(-2*Lambda*(Q.T).dot(wp)-rho, tc='d')\r\n","    A = matrix(np.vstack((beta, [1]*13)), tc='d')\r\n","    G = matrix(np.vstack((np.diag([1]*13),np.diag([-1]*13))), tc='d')\r\n","    h = matrix([2]*26, tc='d')\r\n","    b = matrix([j,1], tc='d')\r\n","\r\n","    # Do the optimization using QP solver:\r\n","    opt = solvers.qp(P, q, G, h, A, b, options={'show_progress':False})\r\n","    w = opt['x']\r\n","    wp = np.array(w).reshape(-1,1)\r\n","    Rp = Rp + [wp.T.dot(rho)[0,0]]\r\n","  R_opt.append(Rp)\r\n","\r\n","R_opt = pd.DataFrame(np.array(R_opt))\r\n","R_opt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fdV2cTrAyp8R"},"source":["# Conduct the min variance with 15% target return strategy.\r\n","Rp = []\r\n","wp = np.ones((13,1))*1/13\r\n","\r\n","for i in range(len(R_bc)-59):\r\n","  r = R_bc[i:(i+60),:]\r\n","  er = ER_bc[i:(i+60),:]\r\n","  f2 = F_bc[i:(i+60),:]\r\n","  rho = r.mean(axis=0)\r\n","  cov_f = np.cov(f2, rowvar=False)\r\n","\r\n","  # Run regression to get the beta\r\n","  lm = LinearRegression()\r\n","  lm.fit(f2, er)\r\n","  coeff3 = lm.coef_\r\n","  beta = coeff3[:,0]\r\n","  error = er - lm.predict(f2)\r\n","\r\n","  # Calculate the covariance matrix\r\n","  Q = coeff3.dot(cov_f).dot(coeff3.T)+np.diag(error.var(axis=0))\r\n","\r\n","  # Preparation for the optimization\r\n","  P = matrix(2*(1+Lambda)*Q, tc='d')\r\n","  q = matrix(-2*Lambda*(Q.T).dot(wp), tc='d')\r\n","  G = matrix(np.vstack((np.diag([1]*13),np.diag([-1]*13))), tc='d')\r\n","  h = matrix([2]*26, tc='d') \r\n","  A = matrix(np.vstack((beta, [1]*13)), tc='d')\r\n","  b = matrix([0.15,1], tc='d')\r\n","\r\n","  # Do the optimization using QP solver\r\n","  opt = solvers.qp(P, q, G, h, A, b, options={'show_progress':False})\r\n","  w = opt['x']\r\n","  wp = np.array(w).reshape(-1,1)\r\n","  Rp = Rp + [wp.T.dot(rho.reshape(-1,1))[0,0]]\r\n","\r\n","R_opt.append(Rp)\r\n","R_opt = pd.DataFrame(np.array(R_opt))\r\n","R_opt\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KVOGDDbTsVY2"},"source":["# Short term model(60 days)\r\n","Lambda = 0.001\r\n","beta_T = [0.5, 1, 1.5]\r\n","R_opt = []\r\n","\r\n","# Conduct the max return strategy\r\n","window = 63\r\n","alocate = 5\r\n","R_opt = R_bc[window:,4]/250\r\n","for j in beta_T:\r\n","  Rp = []\r\n","  wp = np.ones((13,1))*1/13\r\n","  for i in range(window,Num_days):\r\n","    future_return = R_bc[i, :].reshape(-1, 1)\r\n","    if i%alocate==0:\r\n","      r = R_bc[(i-window):i,:]\r\n","      er = ER_bc[(i-window):i,:]\r\n","      f1 = F_bc[(i-window):i,:]\r\n","      rho = r.mean(axis=0).reshape(-1,1)\r\n","      cov_f = np.cov(f1, rowvar=False)\r\n","\r\n","      # Run regression to get the beta\r\n","      lm = LinearRegression()\r\n","      lm.fit(f1, er)\r\n","      coeff3 = lm.coef_\r\n","      beta = coeff3[:,0]\r\n","      error = er - lm.predict(f1)\r\n","\r\n","      # Calculate the covariance matrix\r\n","      #Q = coeff3.dot(cov_f).dot(coeff3.T)+np.diag(error.var(axis=0))\r\n","      Q = np.diag([1]*13)\r\n","\r\n","      # Preparation for the optimization\r\n","      P = matrix(2*Lambda*Q, tc='d')\r\n","      q = matrix(-2*Lambda*(Q.T).dot(wp)-rho, tc='d')\r\n","      A = matrix(np.vstack((beta, [1]*13)), tc='d')\r\n","      G = matrix(np.vstack((np.diag([1]*13),np.diag([-1]*13))), tc='d')\r\n","      h = matrix([2]*26, tc='d')\r\n","      b = matrix([j,1], tc='d')\r\n","      \r\n","      # Do the optimization using QP solver\r\n","      opt = solvers.qp(P, q, G, h, A, b, options={'show_progress':False})\r\n","      w = opt['x']\r\n","      wp = np.array(w).reshape(-1,1)\r\n","    Rp = Rp + [wp.T.dot(future_return/250)[0,0]]\r\n","\r\n","R_opt = pd.DataFrame(np.array(R_opt).transpose())\r\n","R_opt\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dvq9D64ns2s1"},"source":["# Conduct the min variance with 15% target return strategy.\r\n","Rp = []\r\n","wp = np.ones((13,1))*1/13\r\n","\r\n","# Short term model(60 days)\r\n","Lambda = 0.001\r\n","beta_T = [0.5, 1, 1.5]\r\n","R_opt = []\r\n","\r\n","for i in range(window, Num_days):\r\n","  future_return = R_bc[i, :].reshape(-1, 1)\r\n","  if i % alocate == 0:\r\n","    r = R_bc[(i - window):i, :]\r\n","    er = ER_bc[(i - window):i, :]\r\n","    f1 = F_bc[(i - window):i, :]\r\n","    rho = r.mean(axis=0)\r\n","    cov_f = np.cov(f1, rowvar=False)\r\n","\r\n","    # Run regression to get the beta\r\n","    lm = LinearRegression()\r\n","    lm.fit(f1, er)\r\n","    coeff3 = lm.coef_\r\n","    beta = coeff3[:,0]\r\n","    error = er - lm.predict(f1)\r\n","\r\n","    # Calculate the covariance matrix\r\n","    Q = coeff3.dot(cov_f).dot(coeff3.T)+np.diag(error.var(axis=0))\r\n","    Q_ = np.diag([1]*13)\r\n","\r\n","    # Preparation for the optimization\r\n","    P = matrix((Q+Lambda*Q_), tc='d')\r\n","    q = matrix(-2*Lambda*(Q_.T).dot(wp), tc='d')\r\n","    G = matrix(np.vstack((np.diag([1]*13),np.diag([-1]*13))), tc='d')\r\n","    h = matrix([2]*26, tc='d')\r\n","    A = matrix(np.vstack((rho, [1]*13)), tc='d')\r\n","    b = matrix([0.15,1], tc='d')\r\n","    \r\n","    # Do the optimization using QP solver\r\n","    opt = solvers.qp(P, q, G, h, A, b, options={'show_progress':False})\r\n","    w = opt['x']\r\n","    wp = np.array(w).reshape(-1,1)\r\n","  Rp = Rp + [wp.T.dot(future_return/250)[0,0]]\r\n","  R_opt.append(Rp)\r\n","\r\n","#plt.plot(range(result.shape[0]),result[\"beta=0.5\"])\r\n","\r\n","result = pd.DataFrame(R_opt)\r\n","print(result)\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Iaecsfc0qKJL"},"source":["# Compute PnL\r\n","pnl = PnL(result)\r\n","print(pnl)\r\n","for i in range(5):\r\n","  plt.plot(pnl[:,i],label=i)\r\n","plt.legend(loc='best')\r\n","plt.show()\r\n","\r\n","# result = R_bc.copy()/250\r\n","days = result.shape[0]\r\n","\r\n","print(\"Last PnL after %s: \" % days, PnL(result,100)[-1, :])\r\n","\r\n","# Geometric Mean\r\n","print(\"Geometric mean\",gmean(result)*250)\r\n","\r\n","# Min\r\n","print(\"Daily min\",np.min(result,axis=0)*250)\r\n","\r\n","# Max Drawdown\r\n","print('max drawdown: ', MaxDrawdown(result))\r\n","\r\n","# Vol:\r\n","print(\"Volatility\", Volatility(result))\r\n","\r\n","# Sharpe Ratio:\r\n","RF = np.array(R_bc-ER_bc)[:,0].reshape(-1,1)/250\r\n","#print(\"Sharp ratio: \", SharpRatio(result,RF))\r\n","# print(\"Mean sharp: \", np.mean(SharpRatio(result,RF),axis=0))\r\n","\r\n","# Kurtosis:\r\n","print(\"Kurtosis: \", Kurtosis(result))\r\n","print(\"Skewness: \", Skewness(result))\r\n","print(\"%s VaR %s days: \" % (0.99, days), VaR(result, 0.99))\r\n","print(\"%s CVaR %s days: \" % (0.99, days), CVaR(result, 0.99))\r\n","\r\n","for i in range(result.shape[1]):\r\n","    # print(i)\r\n","    plt.plot((1+result[:,i]).cumprod(),label=ticker[i])\r\n","\r\n","plt.legend(loc='best')\r\n","RF = np.array(R_bc - ER_bc)[window:, 0].reshape(-1, 1) / 250\r\n","Summary(R_bc,RF,0.99)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iaLsY_nAoFwt"},"source":["pd.DataFrame(R_opt,index=['β=0.5','β=1','β=1.5','minvar']).T"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i7eTe7-3oFwu"},"source":["r = R_bc[0:60,:]\n","er = ER_bc[0:60,:]\n","f1 = F_bc[0:60,:]\n","rho = r.mean(axis=0).reshape(-1,1)\n","cov_f = np.cov(f1, rowvar=False)\n","\n","# Run regression to get the beta\n","lm = LinearRegression()\n","lm.fit(f1, er)\n","coeff3 = lm.coef_\n","beta = coeff3[:,0]\n","error = er - lm.predict(f1)\n","# Calculate the covariance matrix\n","Q = coeff3.dot(cov_f).dot(coeff3.T)+np.diag(error.var(axis=0))\n","# Preparation for the optimization\n","P = matrix(2*Lambda*Q, tc='d')\n","q = matrix(-2*Lambda*(Q.T).dot(wp)-rho, tc='d')\n","A = matrix(np.vstack((beta, [1]*13)), tc='d')\n","b = matrix([1.5,1], tc='d')\n","# Do the optimization using QP solver\n","opt = solvers.qp(P=P, q=q, A=A, b=b, options={'show_progress':False})\n","w = opt['x']\n","wp = np.array(w).reshape(-1,1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DqFmhC8EoFwv"},"source":["wp.T.dot(rho)\r\n","wp"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rMx6YilrtpCe"},"source":["pd.DataFrame(R_opt,index=['β=0.5','β=1','β=1.5','minvar']).T"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"smUFW9lXzkj8"},"source":["#### Main"]},{"cell_type":"code","metadata":{"id":"xwOQwEyj45Fv"},"source":["all_data = pd.read_csv(data_dir + \"630data.csv\",index_col=0)\r\n","ff_factor = all_data.loc[:,\"Mkt-RF\":r\"RF\"]\r\n","etf_data = all_data.loc[:,:\"EPP\"]\r\n","\r\n","etf_return = (etf_data/etf_data.shift(1)-1).dropna(axis = 0)\r\n","ff_data = ff_factor.iloc[1:,:]\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pI8hwQKZ4yjI"},"source":["# Before Crisis:\r\n","bc_test_etf_return = etf_return.loc[:\"2008-03-03\",:]\r\n","bc_test_ff_data = ff_data.loc[:\"2008-03-03\",:]\r\n","bc_lookback_list = [[60,60],[60,120],[120,180]]\r\n","bc_beta_list = [0.5,1,2]\r\n","bc_performance_result = pd.DataFrame([])\r\n","bc_return_result = pd.DataFrame([])\r\n","omega_list = []\r\n","for lb in bc_lookback_list:\r\n","    for bt in bc_beta_list:\r\n","        res = back_test(etf_return = bc_test_etf_return,\r\n","                                 ff_data = bc_test_ff_data,\r\n","                                 return_period = lb[0],\r\n","                                 variance_period = lb[1],\r\n","                                 lamb = 10,\r\n","                                 beta_tm = bt)\r\n","        omega_list.append(res[1])\r\n","        res = pd.DataFrame(res[0],index = pd.to_datetime(bc_test_etf_return.index))\r\n","        res_perf = indicator(X = res,rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","        bc_return_result = pd.concat([bc_return_result,res],axis = 1)\r\n","        bc_performance_result = pd.concat([bc_performance_result,res_perf],axis = 1)\r\n","        \r\n","bc_return_result = pd.concat([bc_return_result,bc_test_etf_return['SPY']],axis = 1)\r\n","\r\n","bc_spy_performance = indicator(X = pd.DataFrame(bc_test_etf_return.loc[:,'SPY']),rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","bc_performance_result = pd.concat([bc_performance_result,bc_spy_performance],axis = 1)\r\n","bc_performance_result.columns = [['$S^{60}_{60}$','$S^{60}_{60}$','$S^{60}_{60}$',\r\n","                      '$S^{60}_{120}$','$S^{60}_{120}$','$S^{60}_{120}$',\r\n","                      '$S^{120}_{180}$','$S^{120}_{180}$','$S^{120}_{180}$','SPY'],\r\n","                     ['β=0.5','β=1.0','β=2.0',\r\n","                      'β=0.5','β=1.0','β=2.0',\r\n","                      'β=0.5','β=1.0','β=2.0','']]\r\n","bc_return_result.columns = bc_performance_result.columns\r\n","save_data(bc_return_result, 'bc_return_result')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nNmVLlra41YP"},"source":["# before crisis plot:\r\n","for i in range(10):\r\n","  plt.plot(100*(np.cumprod(bc_return_result.iloc[:,i]+1)),label = bc_return_result.columns[i][0]+', '+bc_return_result.columns[i][1])\r\n","  plt.legend()\r\n","plt.xlabel('Time', fontweight='bold', fontsize=12)\r\n","plt.ylabel('Net Value', fontweight='bold', fontsize=12)\r\n","plt.title('Evolution of Net Value', fontweight='bold', fontsize=15)\r\n","plt.savefig(graphs_dir + 'bc_net_val.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ExxsmTU-Gd3P"},"source":["fig = plt.figure(figsize=(20, 20))\r\n","ret_dist_S_60_120 = fig.add_subplot(111, projection='3d')\r\n","for i in range(3):\r\n","  dt = bc_return_result.iloc[:,i+3]\r\n","  column_name = bc_return_result.columns[i+3]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ret_dist_S_60_120.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ret_dist_S_60_120.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ret_dist_S_60_120.plot(x_plot/60,[z]*len(y),dens/8,color ='black',linewidth = 2.0)\r\n","ret_dist_S_60_120.set_xlabel('Return', fontweight='bold', fontsize=12)\r\n","ret_dist_S_60_120.set_ylabel('Beta', fontweight='bold', fontsize=12)\r\n","ret_dist_S_60_120.set_zlabel('Frequency', fontweight='bold', fontsize=12)\r\n","ret_dist_S_60_120.set_title('Return Distribution', fontweight='bold', fontsize=15)\r\n","plt.savefig(graphs_dir + 'bc_ret_dist_S^60_120.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EM21qS_dGbzf"},"source":["fig = plt.figure(figsize=(20, 20))\r\n","ret_dist_S_120_180 = fig.add_subplot(111, projection='3d')\r\n","for i in range(3):\r\n","  dt = bc_return_result.iloc[:,i+6]\r\n","  column_name = bc_return_result.columns[i+6]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ret_dist_S_120_180.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ret_dist_S_120_180.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ret_dist_S_120_180.plot(x_plot/70,[z]*len(y),dens/5,color ='black',linewidth = 2.0)\r\n","ret_dist_S_120_180.set_xlabel('Return', fontweight='bold', fontsize=12)\r\n","ret_dist_S_120_180.set_ylabel('Beta', fontweight='bold', fontsize=12)\r\n","ret_dist_S_120_180.set_zlabel('Frequency', fontweight='bold', fontsize=12)\r\n","ret_dist_S_120_180.set_title('Return Distribution', fontweight='bold', fontsize=15)\r\n","plt.savefig(graphs_dir + 'bc_ret_dist_S^120_180.png', bbox_inches='tight')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u3F1QmSE5D93"},"source":["# during crisis\r\n","dc_test_etf_return = etf_return.loc[\"2008-03-03\":\"2010-09-01\",:]\r\n","dc_test_ff_data = ff_data.loc[\"2008-03-03\":\"2010-09-01\",:]\r\n","dc_lookback_list = [[60,60],[60,120],[120,180]]\r\n","dc_beta_list = [0.5,1,2]\r\n","dc_performance_result = pd.DataFrame([])\r\n","dc_return_result = pd.DataFrame([])\r\n","omega_list = []\r\n","for lb in dc_lookback_list:\r\n","  for bt in dc_beta_list:\r\n","    res = back_test(etf_return =\r\n","                    dc_test_etf_return,\r\n","                    ff_data = dc_test_ff_data,\r\n","                    return_period = lb[0],\r\n","                    variance_period = lb[1],\r\n","                    lamb = 10,\r\n","                    beta_tm = bt)\r\n","    omega_list.append(res[1])\r\n","    res = pd.DataFrame(res[0],index = pd.to_datetime(dc_test_etf_return.index))\r\n","    res_perf = indicator(X = res,rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","    dc_return_result = pd.concat([dc_return_result,res],axis = 1)\r\n","    dc_performance_result = pd.concat([dc_performance_result,res_perf],axis = 1)\r\n","\r\n","dc_return_result = pd.concat([dc_return_result,dc_test_etf_return['SPY']],axis = 1)\r\n","\r\n","dc_spy_performance = indicator(X = pd.DataFrame(dc_test_etf_return.loc[:,'SPY']),rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","dc_performance_result = pd.concat([dc_performance_result,dc_spy_performance],axis = 1)\r\n","dc_performance_result.columns = [['$S^{60}_{60}$','$S^{60}_{60}$','$S^{60}_{60}$',\r\n","                      '$S^{60}_{120}$','$S^{60}_{120}$','$S^{60}_{120}$',\r\n","                      '$S^{120}_{180}$','$S^{120}_{180}$','$S^{120}_{180}$','SPY'],\r\n","                     ['β=0.5','β=1.0','β=2.0',\r\n","                      'β=0.5','β=1.0','β=2.0',\r\n","                      'β=0.5','β=1.0','β=2.0','']]\r\n","\r\n","dc_return_result.columns = dc_performance_result.columns\r\n","save_data(dc_performance_result, 'dc_performance_result')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-LHX0qrE4-yv"},"source":["# During Crisis Plot:\r\n","for i in range(10):\r\n","  plt.plot(100*(np.cumprod(dc_return_result.iloc[:,i]+1)),label = dc_return_result.columns[i][0]+', '+dc_return_result.columns[i][1])\r\n","  plt.legend()\r\n","plt.xlabel('Time')\r\n","plt.ylabel('Net Value')\r\n","plt.title('Evolution of Net Value')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","\r\n","for i in range(3):\r\n","  dt = dc_return_result.iloc[:,i]\r\n","  column_name = dc_return_result.columns[i]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x, y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:]) / 2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs = z, zdir = 'y', color = cs, alpha = 0.7, width = 0.003, label = column_name[0]+', ' + column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/30,[z]*len(y),dens/10,color ='black',linewidth = 2.0)\r\n","\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","\r\n","for i in range(3):\r\n","  dt = dc_return_result.iloc[:,i+3]\r\n","  column_name = dc_return_result.columns[i+3]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/40,[z]*len(y),dens/9,color ='black',linewidth = 2.0)\r\n","\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","\r\n","for i in range(3):\r\n","  dt = dc_return_result.iloc[:,i+6]\r\n","  column_name = dc_return_result.columns[i+6]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/50,[z]*len(y),dens/9,color ='black',linewidth = 2.0)\r\n","\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2s79x8UrzRjU"},"source":["# After crisis:\r\n","ac_test_etf_return = etf_return.loc[\"2010-09-01\":'2015-01-02',:]\r\n","ac_test_ff_data = ff_data.loc[\"2010-09-01\":'2015-01-02',:]\r\n","ac_lookback_list = [[60,60],[60,120],[120,180]]\r\n","ac_beta_list = [0.5,1,2]\r\n","ac_performance_result = pd.DataFrame([])\r\n","ac_return_result = pd.DataFrame([])\r\n","omega_list = []\r\n","for lb in ac_lookback_list:\r\n","  for bt in ac_beta_list:\r\n","    res = back_test(etf_return = ac_test_etf_return,\r\n","                    ff_data = ac_test_ff_data,\r\n","                    return_period = lb[0],\r\n","                    variance_period = lb[1],\r\n","                    lamb = 10,\r\n","                    beta_tm = bt)\r\n","    omega_list.append(res[1])\r\n","    res = pd.DataFrame(res[0],index = pd.to_datetime(ac_test_etf_return.index))\r\n","    res_perf = indicator(X = res,rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","    ac_return_result = pd.concat([ac_return_result,res],axis = 1)\r\n","    ac_performance_result = pd.concat([ac_performance_result,res_perf],axis = 1)\r\n","\r\n","ac_return_result = pd.concat([ac_return_result,ac_test_etf_return['SPY']],axis = 1)\r\n","ac_spy_performance = indicator(X = pd.DataFrame(ac_test_etf_return.loc[:,'SPY']),rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","ac_performance_result = pd.concat([ac_performance_result,ac_spy_performance],axis = 1)\r\n","\r\n","ac_performance_result.columns = [['$S^{60}_{60}$','$S^{60}_{60}$','$S^{60}_{60}$',\r\n","                                  '$S^{60}_{120}$','$S^{60}_{120}$','$S^{60}_{120}$',\r\n","                                  '$S^{120}_{180}$','$S^{120}_{180}$','$S^{120}_{180}$',\r\n","                                  'SPY'],\r\n","                                 ['β=0.5','β=1.0','β=2.0',\r\n","                                  'β=0.5','β=1.0','β=2.0',\r\n","                                  'β=0.5','β=1.0','β=2.0','']]\r\n","ac_return_result.columns = ac_performance_result.columns\r\n","save_data(ac_performance_result, 'ac_performance_result')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V8N0fWjb5SW6"},"source":["# After Crisis Plot:\r\n","fig = plt.figure(figsize=(15, 7.5))\r\n","ax = fig.add_subplot(111)\r\n","for i in range(10):\r\n","  ax.plot(100*(np.cumprod(ac_return_result.iloc[:,i]+1)),label = ac_return_result.columns[i][0]+', '+ac_return_result.columns[i][1])\r\n","  ax.legend()\r\n","plt.xlabel('Time')\r\n","plt.ylabel('Net Value')\r\n","plt.title('Evolution of Net Value')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","for i in range(3):\r\n","  dt = ac_return_result.iloc[:,i]\r\n","  column_name = ac_return_result.columns[i]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/20,[z]*len(y),dens/10,color ='black',linewidth = 2.0)\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","for i in range(3):\r\n","  dt = ac_return_result.iloc[:,i+3]\r\n","  column_name = ac_return_result.columns[i+3]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/20,[z]*len(y),dens/8,color ='black',linewidth = 2.0)\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","for i in range(3):\r\n","  dt = ac_return_result.iloc[:,i+6]\r\n","  column_name = ac_return_result.columns[i+6]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 80)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/30,[z]*len(y),dens/7,color ='black',linewidth = 2.0)\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VykFgiGJ5UsD"},"source":["# Full Period:\r\n","wp_test_etf_return = etf_return.loc[:,:]\r\n","wp_test_ff_data = ff_data.loc[:,:]\r\n","wp_lookback_list = [[60,60],[60,120],[120,180]]\r\n","wp_beta_list = [0.5,1,2]\r\n","wp_performance_result = pd.DataFrame([])\r\n","wp_return_result = pd.DataFrame([])\r\n","omega_list = []\r\n","\r\n","for lb in wp_lookback_list:\r\n","  for bt in wp_beta_list:\r\n","    res = back_test(etf_return = wp_test_etf_return,\r\n","                    ff_data = wp_test_ff_data,\r\n","                    return_period = lb[0],\r\n","                    variance_period = lb[1],\r\n","                    lamb = 10,\r\n","                    beta_tm = bt)\r\n","    omega_list.append(res[1])\r\n","    res = pd.DataFrame(res[0],index = pd.to_datetime(wp_test_etf_return.index))\r\n","    res_perf = indicator(X = res,rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","    wp_return_result = pd.concat([wp_return_result,res],axis = 1)\r\n","    wp_performance_result = pd.concat([wp_performance_result,res_perf],axis = 1)\r\n","\r\n","wp_return_result = pd.concat([wp_return_result,wp_test_etf_return['SPY']],axis = 1)\r\n","wp_spy_performance = indicator(X = pd.DataFrame(wp_test_etf_return.loc[:,'SPY']),rf = 0.06, confidenceLevel = 0.95, position = 100)\r\n","wp_performance_result = pd.concat([wp_performance_result,wp_spy_performance],axis = 1)\r\n","wp_performance_result.columns = [['$S^{60}_{60}$','$S^{60}_{60}$','$S^{60}_{60}$',\r\n","                      '$S^{60}_{120}$','$S^{60}_{120}$','$S^{60}_{120}$',\r\n","                      '$S^{120}_{180}$','$S^{120}_{180}$','$S^{120}_{180}$','SPY'],\r\n","                     ['β=0.5','β=1.0','β=2.0',\r\n","                      'β=0.5','β=1.0','β=2.0',\r\n","                      'β=0.5','β=1.0','β=2.0','']]\r\n","\r\n","wp_return_result.columns = wp_performance_result.columns\r\n","wp_performance_result.to_csv('wp_performance_result')\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nuUd68WmIR7M"},"source":["\\begin{equation}\r\n","R_{i}-r_{f}=\\alpha_{i}+\\beta{i}^{MKT}(R_{M}-r_{f})+\\beta_{i}^{SMB}R_{SMB}+\\beta_{i}^{HML}R_{HML}\r\n","\\end{equation}"]},{"cell_type":"code","metadata":{"id":"pIL-IBzX5XPj"},"source":["# Full-period plot:\r\n","\r\n","for i in range(10):\r\n","  plt.plot(100*(np.cumprod(wp_return_result.iloc[:,i]+1)),label = wp_return_result.columns[i][0]+', '+wp_return_result.columns[i][1])\r\n","  plt.legend()\r\n","plt.xlabel('Time')\r\n","plt.ylabel('Net Value')\r\n","plt.title('Evolution of Net Value')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","\r\n","for i in range(3):\r\n","  dt = wp_return_result.iloc[:,i]\r\n","  column_name = wp_return_result.columns[i]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 500)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/20,[z]*len(y),dens/8,color ='black',linewidth = 2.0)\r\n","\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","\r\n","for i in range(3):\r\n","  dt = wp_return_result.iloc[:, i+3]\r\n","  column_name = wp_return_result.columns[i + 3]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 500)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/20,[z]*len(y),dens/8,color ='black',linewidth = 2.0)\r\n","\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","\r\n","fig = plt.figure(figsize=(20, 20))\r\n","ax = fig.add_subplot(111, projection='3d')\r\n","\r\n","for i in range(3):\r\n","  dt = wp_return_result.iloc[:,i+6]\r\n","  column_name = wp_return_result.columns[i+6]\r\n","  c =  ['r', 'g', 'b'][i]\r\n","  z =  [0.5,1,2][i]\r\n","  x,y = np.histogram(dt,bins = 500)\r\n","  x = x/len(dt)\r\n","  y = (y[:-1]+y[1:])/2\r\n","  cs = [c] * len(x)\r\n","  ax.bar(y, x, zs=z, zdir='y', color=cs, alpha=0.7,width = 0.003,label = column_name[0]+', '+column_name[1])\r\n","  ax.legend(fontsize=13)\r\n","\r\n","  samples = np.asarray(dt).reshape(-1,1)\r\n","  x_plot = np.linspace(-10,10,80).reshape(-1,1)\r\n","  kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(samples)\r\n","  log_dens = kde.score_samples(x_plot)\r\n","  dens = np.exp(log_dens)\r\n","  ax.plot(x_plot/20,[z]*len(y),dens/7,color ='black',linewidth = 2.0)\r\n","\r\n","ax.set_xlabel('Return')\r\n","ax.set_ylabel('Beta')\r\n","ax.set_zlabel('Frequency')\r\n","ax.set_title('Return Distribution')\r\n","  "],"execution_count":null,"outputs":[]}]}